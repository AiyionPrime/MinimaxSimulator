operation.transfer.description = Leitet {0} unver\u00E4ndert durch die ALU.
operation.transfer.rtn = {0}

operation.add.description = Addiert {0} und {1}.
operation.add.rtn = {0} + {1}

operation.sub.description = Subtrahiert {1} von {0}.
operation.sub.rtn = {0} - {1}

operation.mul.description = Multipliziert {0} mit {1}.
operation.mul.rtn = {0} * {1}

operation.div.description = Teilt {0} ganzzahlig durch {1}. Division durch 0 ergibt 0.
operation.div.rtn = {0} / {1}

operation.mod.description = Ganzzahliger Rest von {0} geteilt durch {1}. Ergebnis ist 0 für {1} = 0.
operation.mod.rtn = {0} mod {1}

operation.inc.description = Erhöht {0} um 1.
operation.inc.rtn = {0} + 1

operation.dec.description = Vermindert {0} um 1.
operation.dec.rtn = {0} - 1

operation.and.description = Bitweise UND-Verkn\u00FCpfung von {0} und {1}.
operation.and.rtn = {0} & {1}

operation.or.description = Bitweise ODER-Verkn\u00FCpfung von {0} und {1}.
operation.or.rtn = {0} | {1}

operation.xor.description = Bitweise XOR-Verkn\u00FCpfung von {0} und {1}.
operation.xor.rtn = {0} ^ {1}

operation.inv.description = Invertiert {0} bitweise.
operation.inv.rtn = \u00AC {0}

operation.sl1.description = Shift left: Verschiebt alle Bits von {0} um eine Stelle nach links. Das MSB wird verworfen, das LSB wird auf 0 gesetzt.
operation.sl1.rtn = {0}[30..0]@0

operation.sl2.description = Shift left: Verschiebt alle Bits von {0} um {1} Stellen nach links. Die MSBs werden verworfen, die LSBs werden auf 0 gesetzt.
operation.sl2.rtn = {0}[31-{1}..0]@0^{1}

operation.sr1.description = Shift right: Verschiebt alle Bits von {0} um eine Stelle nach rechts. Das LSB wird verworfen, das MSB wird vorzeichenrichtig erg\u00E4nzt.
operation.sr1.rtn = {0}[31]@{0}[31..1]

operation.sr2.description = Shift right: Verschiebt alle Bits von {0} um {1} Stellen nach rechts. Die LSBs werden verworfen, die MSBs werden vorzeichenrichtig erg\u00E4nzt.
operation.sr2.rtn = {0}[31]^{1}@{0}[31..{1}]

operation.sru1.description = Shift right unsigned mode: Verschiebt alle Bits von {0} um eine Stelle nach rechts. Das LSB wird verworfen, das MSB wird auf 0 gesetzt.
operation.sru1.rtn = 0@{0}[31..1]

operation.sru2.description = Shift right unsigned mode: Verschiebt alle Bits von {0} um {1} Stellen nach rechts. Die LSBs werden verworfen, die MSBs werden auf 0 gesetzt.
operation.sru2.rtn = 0^{1}@{0}[31..{1}]

operation.rotl1.description = Rotate left: Rotiert alle Bits von {0} um eine Stelle nach links. Das LSB erhält den vorherigen Wert des MSB.
operation.rotl1.rtn = {0}[30..0]@{0}[31]

operation.rotl2.description = Rotate left: Rotiert alle Bits von {0} um {1} Stellen nach links. Das LSB erhält in jedem Schritt den vorherigen Wert des MSB.
operation.rotl2.rtn = {0}[31-{1}..0]@{0}[31..32-{1}]

operation.rotr1.description = Rotate right: Rotiert alle Bits von {0} um eine Stelle nach rechts. Das MSB erhält den vorherigen Wert des LSB.
operation.rotr1.rtn = {0}[0]@{0}[31..1]

operation.rotr2.description = Rotate right: Rotiert alle Bits von {0} um {1} Stellen nach rechts. Das MSB erhält in jedem Schritt den vorherigen Wert des LSB.
operation.rotr2.rtn = {0}[{1}-1..0]@{0}[31..{1}]